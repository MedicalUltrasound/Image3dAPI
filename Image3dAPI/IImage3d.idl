/* "3D API" interface header.
   Designed by Fredrik Orderud <fredrik.orderud@ge.com>.
   Copyright (c) 2016, GE Healthcare, Ultrasound.
   
Design goals:
* Stable compiler-independent ABI (binary API).
* Support transfer of image data ownership across API (to avoid copying).
* Support out-of-process loaders (for sandboxing).
* Support multiple programming languages natively.
*/

/* Interfaces and data structures for exchanging image data. */
import "oaidl.idl";


typedef [
  v1_enum, // 32bit enum size
  helpstring("Image3dAPI version.")]
enum Image3dAPIVersion {
    IMAGE3DAPI_VERSION_MAJOR = 1,
    IMAGE3DAPI_VERSION_MINOR = 2,
} Image3dAPIVersion;


typedef [
  v1_enum, // 32bit enum size
  helpstring("Enum of supported image formats (extended upon demand). Multi-channel formats are documented in byte order.")]
enum ImageFormat {
    IMAGE_FORMAT_INVALID   = 0, ///< make sure that "cleared" state is invalid
    IMAGE_FORMAT_U8        = 1, ///< unsigned 8bit grayscale
    IMAGE_FORMAT_FREQ8POW8 = 2, ///< 16bit color-flow format (8bit signed frequency value, 8bit unsigned power/bandwidth value)
    IMAGE_FORMAT_R8G8B8A8  = 3, ///< 32bit RGBA (alpha channel ignored)
} ImageFormat;


typedef [
  v1_enum, // 32bit enum size
  helpstring("Probe type enum."
             "Values taken from http://dicom.nema.org/medical/Dicom/2017b/output/chtml/part16/sect_CID_12035.html")]
enum ProbeType {
    PROBE_UNKNOWN         = 0,
    PROBE_External        = 125261,
    PROBE_Transesophageal = 125262,
    PROBE_Endovaginal     = 125263,
    PROBE_Endorectal      = 125264,
    PROBE_Intravascular   = 125265,
} ProbeType;

cpp_quote("")
cpp_quote("#ifndef __cplusplus")

typedef [
  helpstring("Probe information.")]
struct ProbeInfo {
    [helpstring("Can be useful for initializing renderings and quantification tools.")]
    ProbeType type;

    [helpstring("short name describing probe")]
    BSTR      name; 
} ProbeInfo;

cpp_quote("")
cpp_quote("#else // __cplusplus")
cpp_quote("} // extern \"C\"")
cpp_quote("")
cpp_quote("struct ProbeInfo {")
cpp_quote("    ProbeType type = PROBE_UNKNOWN;")
cpp_quote("    CComBSTR  name; ///< BSTR wrapper")
cpp_quote("};")
cpp_quote("")
cpp_quote("extern \"C\"{")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#if defined _WIN64 || defined __x86_64__")
cpp_quote("static_assert(sizeof(ProbeInfo) == 4+4+8, \"ProbeInfo size mismatch\");")
cpp_quote("#else")
cpp_quote("static_assert(sizeof(ProbeInfo) == 4+4, \"ProbeInfo size mismatch\");")
cpp_quote("#endif")


cpp_quote("")
cpp_quote("#ifndef __cplusplus")

typedef [
  helpstring("3D image data struct. Stored in row-major order. The data buffer might be padded between rows due to alignment needs.")]
struct Image3d {
    [helpstring("time [seconds]")]                                            double          time;
    [helpstring("")]                                                          ImageFormat     format;
    [helpstring("resolution (width/columns, height/rows, planes)")]           unsigned short  dims[3];
    [helpstring("distance between each row [bytes] (>= width*element_size)")] unsigned int    stride0;
    [helpstring("distance between each plane [bytes] (>= height*stride0)")]   unsigned int    stride1;
    [helpstring("underlying 1D image buffer (size >= planes*stride1)")]       SAFEARRAY(byte) data;
} Image3d;

cpp_quote("")
cpp_quote("#else // __cplusplus")
cpp_quote("} // extern \"C\"")
cpp_quote("")
cpp_quote("struct Image3d {")
cpp_quote("    double         time    = 0;")
cpp_quote("    ImageFormat    format  = IMAGE_FORMAT_INVALID;")
cpp_quote("    unsigned short dims[3] = {0,0,0};")
cpp_quote("    unsigned int   stride0 = 0;")
cpp_quote("    unsigned int   stride1 = 0;")
cpp_quote("    SAFEARRAY    * data    = nullptr; ///< BYTE array")
cpp_quote("    ")
cpp_quote("    /* Primary ctor. */")
cpp_quote("    Image3d() {")
cpp_quote("    }")
cpp_quote("    /** Copy ctor. Performs deep copy. */")
cpp_quote("    Image3d(const Image3d& obj) {")
cpp_quote("        time = obj.time;")
cpp_quote("        format = obj.format;")
cpp_quote("        for (unsigned int i = 0; i < 3; ++i)")
cpp_quote("            dims[i] = obj.dims[i];")
cpp_quote("        stride0 = obj.stride0;")
cpp_quote("        stride1 = obj.stride1;")
cpp_quote("        CComSafeArray<BYTE> tmp;")
cpp_quote("        tmp.Attach(obj.data);")
cpp_quote("        tmp.CopyTo(&data);")
cpp_quote("        tmp.Detach();")
cpp_quote("    }")
cpp_quote("    ")
cpp_quote("    ~Image3d() {")
cpp_quote("        release(); // clear existing state")
cpp_quote("    }")
cpp_quote("    ")
cpp_quote("    /** Move assignment.*/")
cpp_quote("    Image3d& operator = (Image3d&& obj) {")
cpp_quote("        release(); // clear existing state")
cpp_quote("        ")
cpp_quote("        time = obj.time;")
cpp_quote("        format = obj.format;")
cpp_quote("        for (unsigned int i = 0; i < 3; ++i)")
cpp_quote("            dims[i] = obj.dims[i];")
cpp_quote("        stride0 = obj.stride0;")
cpp_quote("        stride1 = obj.stride1;")
cpp_quote("        data = obj.data;")
cpp_quote("        obj.data = nullptr;")
cpp_quote("        return *this;")
cpp_quote("    }")
cpp_quote("    ")
cpp_quote("private:")
cpp_quote("    void release () {")
cpp_quote("        if (data) {")
cpp_quote("            CComSafeArray<BYTE> tmp;")
cpp_quote("            tmp.Attach(data);")
cpp_quote("            data = nullptr;")
cpp_quote("        }")
cpp_quote("    }")
cpp_quote("    ")
cpp_quote("    Image3d & operator = (const Image3d& obj) = delete; ///< disallow assignment operator")
cpp_quote("};")
cpp_quote("")
cpp_quote("extern \"C\"{")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#if defined _WIN64 || defined __x86_64__")
cpp_quote("static_assert(sizeof(Image3d) == 40, \"Image3d size mismatch\");")
cpp_quote("#else")
cpp_quote("static_assert(sizeof(Image3d) == 32, \"Image3d size mismatch\");")
cpp_quote("#endif")


typedef [
  helpstring("3D image geometry description that matches C.8.X.2.1.2 'Transducer Frame of Reference' in DICOM Enhanced Ultrasound (sup 43)\n"
             "All units are in meter [m] with orthogonal axes forming a right-handed coordinate system.\n"
             "Coordinates are relative to the tip of the transducer, with origin at the center of the aperture. The X- & Z-axes follow the 1st and 2nd aperture axes, and the Y-axis point into the imaged body.")]
struct Cart3dGeom {
    // coordinates are not arrays to avoid "warning MIDL2492: structure containing array of float/double might not be marshalled correctly when using type library marshalling"
    float origin_x; ///< coordinate of 1st sample
    float origin_y;
    float origin_z;

    float dir1_x;   ///< 1st direction vector (from first to last column)
    float dir1_y;
    float dir1_z;

    float dir2_x;   ///< 2nd direction vector (from first to last row)
    float dir2_y;
    float dir2_z;

    float dir3_x;   ///< 3rd direction vector (from first to last plane)
    float dir3_y;
    float dir3_z;
} Cart3dGeom;

cpp_quote("")
cpp_quote("#ifndef __cplusplus")

typedef [
  helpstring("ECG time series.")]
struct EcgSeries {
    [helpstring("time of 1st sample [seconds]")]
    double           start_time;

    [helpstring("time difference between each sample [seconds]")]
    double           delta_time;

    [helpstring("ECG sample waveform")]
    SAFEARRAY(float) samples;

    [helpstring("QRS/R-wave trig time(s) [seconds] within series [optional]")]
    SAFEARRAY(double) trig_times;
} EcgSeries;

cpp_quote("")
cpp_quote("#else // __cplusplus")
cpp_quote("} // extern \"C\"")
cpp_quote("")
cpp_quote("struct EcgSeries {")
cpp_quote("    double      start_time = 0;")
cpp_quote("    double      delta_time = 0;")
cpp_quote("    SAFEARRAY * samples    = nullptr; ///< float array")
cpp_quote("    SAFEARRAY * trig_times = nullptr; ///< double array")
cpp_quote("    ")
cpp_quote("    /* Primary ctor. */")
cpp_quote("    EcgSeries() {")
cpp_quote("    }")
cpp_quote("    /** Copy ctor. Performs deep copy. */")
cpp_quote("    EcgSeries(const EcgSeries& obj) {")
cpp_quote("        start_time = obj.start_time;")
cpp_quote("        delta_time = obj.delta_time;")
cpp_quote("        CComSafeArray<float> samples_tmp;")
cpp_quote("        samples_tmp.Attach(obj.samples);")
cpp_quote("        samples_tmp.CopyTo(&samples);")
cpp_quote("        samples_tmp.Detach();")
cpp_quote("        CComSafeArray<double> trig_tmp;")
cpp_quote("        trig_tmp.Attach(obj.trig_times);")
cpp_quote("        trig_tmp.CopyTo(&trig_times);")
cpp_quote("        trig_tmp.Detach();")
cpp_quote("    }")
cpp_quote("    ")
cpp_quote("    ~EcgSeries() {")
cpp_quote("        release(); // clear existing state")
cpp_quote("    }")
cpp_quote("    ")
cpp_quote("    /** Move assignment.*/")
cpp_quote("    EcgSeries& operator = (EcgSeries&& obj) {")
cpp_quote("        release(); // clear existing state")
cpp_quote("        ")
cpp_quote("        start_time = obj.start_time;")
cpp_quote("        obj.start_time = 0;")
cpp_quote("        delta_time = obj.delta_time;")
cpp_quote("        obj.delta_time = 0;")
cpp_quote("        samples = obj.samples;")
cpp_quote("        obj.samples = nullptr;")
cpp_quote("        trig_times = obj.trig_times;")
cpp_quote("        obj.trig_times = nullptr;")
cpp_quote("        return *this;")
cpp_quote("    }")
cpp_quote("    ")
cpp_quote("private:")
cpp_quote("    void release () {")
cpp_quote("        if (samples) {")
cpp_quote("            CComSafeArray<float> samples_tmp;")
cpp_quote("            samples_tmp.Attach(samples);")
cpp_quote("            samples = nullptr;")
cpp_quote("        }")
cpp_quote("        if (trig_times) {")
cpp_quote("            CComSafeArray<double> trig_tmp;")
cpp_quote("            trig_tmp.Attach(trig_times);")
cpp_quote("            trig_times = nullptr;")
cpp_quote("        }")
cpp_quote("    }")
cpp_quote("    ")
cpp_quote("    EcgSeries & operator = (const EcgSeries& obj) = delete; ///< disallow assignment operator")
cpp_quote("};")
cpp_quote("")
cpp_quote("extern \"C\"{")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#if defined _WIN64 || defined __x86_64__")
cpp_quote("static_assert(sizeof(EcgSeries) == 4*8, \"EcgSeries size mismatch\");")
cpp_quote("#else")
cpp_quote("static_assert(sizeof(EcgSeries) == 2*8+2*4, \"EcgSeries size mismatch\");")
cpp_quote("#endif")

[ object,
  oleautomation, // use "automation" marshaler (oleaut32.dll)
  uuid(D483D815-52DD-4750-8CA2-5C6C489588B6),
  helpstring("Interface for retrieving 3D image data.")]
interface IImage3dSource : IUnknown {
    [helpstring("Get the number of frames available")]
    HRESULT GetFrameCount ([out,retval] unsigned int * size);

    [helpstring("Get the time of all frames (useful for matching frame indices to ECG before retrieving image data) ")]
    HRESULT GetFrameTimes ([out, retval] SAFEARRAY(double) * frame_times);

    [helpstring("Get image data (const) for a given frame within a specified geometry. The returned frame might have lower resolution than requested.")]
    HRESULT GetFrame ([in] unsigned int index, [in] Cart3dGeom geom, [in] unsigned short max_resolution[3], [out,retval] Image3d * data);

    [helpstring("Get a bounding box encapsulating all image data. Can be used as intput to GetFrame to avoid cropping.")]
    HRESULT GetBoundingBox ([out,retval] Cart3dGeom * geom);

    [helpstring("Retrieve color-map table for mapping image intensities to RGBx values. Length is 256.")]
    HRESULT GetColorMap ([out,retval] SAFEARRAY(unsigned int) * map);

    [helpstring("Get ECG data if available [optional]. Shall return S_OK with an empty EcgSeries if EGC is not available.")]
    HRESULT GetECG ([out,retval] EcgSeries * ecg);

    [helpstring("")]
    HRESULT GetProbeInfo ([out,retval] ProbeInfo * probe);

    [helpstring("Get per-file DICOM UID string (to be matched against corresponding file)")]
    HRESULT GetSopInstanceUID ([out,string,retval] BSTR * uid_str);
};


typedef [
    v1_enum, // 32bit enum size
    helpstring("Image3dAPI error codes.")]
enum Image3dError {
    Image3d_SUCCESS              = 0,
    Image3d_ACCESS_FAILURE       = 1, ///< file missing, inaccessible or locked
    Image3d_VALIDATION_FAILURE   = 2, ///< file corrupt or does not contain required vendor tags
    Image3d_NOT_YET_SUPPORTED    = 3, ///< the loader is too old to read the file and need to be updated
    Image3d_SUPPORT_DISCONTINUED = 4, ///< the loader no longer support the file version
    } Image3dError;


[ object,
  oleautomation, // use "automation" marshaler (oleaut32.dll)
  uuid(CD30759B-EB38-4469-9CA5-4DF75737A31B),
  helpstring("Factory for loading 3D image data from a file.\n"
             "Implementors are responsible for also providing details on relevant DICOM tags that indicate that the loader might support the file.")]
interface IImage3dFileLoader : IUnknown {
    [helpstring("Load proprietary image file.\n"
                "The file might already by opened elsewhere, so no exclusive locks can be taken.\n"
                "The function shall return quickly with error type and diagnostic message (in english) in case of failure.")]
    HRESULT LoadFile ([in,string] BSTR file_name, [out] Image3dError * error_type, [out,string] BSTR * error_msg);

    HRESULT GetImageSource ([out,retval] IImage3dSource ** img_src);
};
