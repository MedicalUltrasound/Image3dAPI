/* "3D API" interface header.
   Designed by Fredrik Orderud <fredrik.orderud@ge.com>.
   Copyright (c) 2016, GE Healthcare, Ultrasound.
   
Design goals:
* Stable compiler-independent ABI (binary API).
* Support transfer of image data ownership across API (to avoid copying).
* Support out-of-process loaders (for sandboxing).
* Support multiple programming languages natively.
*/

/* Interfaces and data structures for exchanging image data. */
import "oaidl.idl";

typedef [
  v1_enum, // 32bit enum size
  uuid(A45D637B-0D4A-4797-9949-2039D963C41C),
  helpstring("Enum of supported image formats (extended upon demand).")]
enum ImageFormat {
    FORMAT_INVALID  = 0, ///< make sure that "cleared" state is invalid
    FORMAT_U8       = 1, ///< unsigned 8bit grayscale
} ImageFormat;


typedef [
  v1_enum, // 32bit enum size
  uuid(8157DC93-DBC4-4BEC-922C-B197237CCF34),
  helpstring("Probe type enum (extended upon demand).")]
enum ProbeType {
    PROBE_UNKNOWN   = 0,
    PROBE_THORAX    = 1, ///< transthoracic probe (for imaging between ribs)
    PROBE_ESOPHAGUS = 2  ///< transesophageal probe
} ProbeType;

cpp_quote("")
cpp_quote("#ifndef __cplusplus")

typedef [
  uuid(1A31C197-3E53-4820-98E0-CE47941E19EF),
  helpstring("Probe information.")]
struct ProbeInfo {
    [helpstring("Can be useful for initializing renderings and quantification tools.")]
    ProbeType type;

    [helpstring("short name describing probe")]
    BSTR      name; 
} ProbeInfo;

cpp_quote("")
cpp_quote("#else // __cplusplus")
cpp_quote("} // extern \"C\"")
cpp_quote("")
cpp_quote("struct DECLSPEC_UUID(\"1A31C197-3E53-4820-98E0-CE47941E19EF\") ProbeInfo {")
cpp_quote("    ProbeType type = PROBE_UNKNOWN;")
cpp_quote("    CComBSTR  name; ///< BSTR wrapper")
cpp_quote("};")
cpp_quote("")
cpp_quote("extern \"C\"{")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#if defined _WIN64 || defined __x86_64__")
cpp_quote("static_assert(sizeof(ProbeInfo) == 4+4+8, \"ProbeInfo size mismatch\");")
cpp_quote("#else")
cpp_quote("static_assert(sizeof(ProbeInfo) == 4+4, \"ProbeInfo size mismatch\");")
cpp_quote("#endif")


cpp_quote("")
cpp_quote("#ifndef __cplusplus")

typedef [
  uuid(74355329-DFEF-4BC0-9103-CF9579536FE3),
  helpstring("3D image data struct. Stored in row-major order. The data buffer might be padded between rows due to alignment needs.")]
struct Image3d {
    [helpstring("time [seconds]")]                                            double          time;
    [helpstring("")]                                                          ImageFormat     format;
    [helpstring("resolution (width/columns, height/rows, planes)")]           unsigned short  dims[3];
    [helpstring("distance between each row [bytes] (>= width*element_size)")] unsigned int    stride0;
    [helpstring("distance between each plane [bytes] (>= height*stride0)")]   unsigned int    stride1;
    [helpstring("underlying 1D image buffer (size >= planes*stride1)")]       SAFEARRAY(byte) data;
} Image3d;

cpp_quote("")
cpp_quote("#else // __cplusplus")
cpp_quote("} // extern \"C\"")
cpp_quote("")
cpp_quote("struct DECLSPEC_UUID(\"74355329-DFEF-4BC0-9103-CF9579536FE3\") Image3d {")
cpp_quote("    double              time   = 0;")
cpp_quote("    ImageFormat         format = FORMAT_INVALID;")
cpp_quote("    unsigned short      dims[3] = {0,0,0};")
cpp_quote("    unsigned int        stride0 = 0;")
cpp_quote("    unsigned int        stride1 = 0;")
cpp_quote("    CComSafeArray<BYTE> data; ///< SAFEARRAY wrapper")
cpp_quote("};")
cpp_quote("")
cpp_quote("extern \"C\"{")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#if defined _WIN64 || defined __x86_64__")
cpp_quote("static_assert(sizeof(Image3d) == 40, \"Image3d size mismatch\");")
cpp_quote("#else")
cpp_quote("static_assert(sizeof(Image3d) == 32, \"Image3d size mismatch\");")
cpp_quote("#endif")


typedef [
  uuid(2ABE0726-3AB5-44F6-8FB3-04F22796EAA9),
  helpstring("Cartesian 3D image geometry description. All units are in meter [m].\n"
             "Coordinates are relative to the tip of the probe, with origin at the center of the aperture. The X- & Y-axes follow the 1st and 2nd probe aperture axes, and the Z-axis points into the imaged body.")]
struct Cart3dGeom {
    // coordinates are not arrays to avoid "warning MIDL2492: structure containing array of float/double might not be marshalled correctly when using type library marshalling"
    float origin_x; ///< coordinate of 1st sample
    float origin_y;
    float origin_z;

    float dir1_x;   ///< 1st direction vector (from first to last column)
    float dir1_y;
    float dir1_z;

    float dir2_x;   ///< 2nd direction vector (from first to last row)
    float dir2_y;
    float dir2_z;

    float dir3_x;   ///< 3rd direction vector (from first to last plane)
    float dir3_y;
    float dir3_z;
} Cart3dGeom;

cpp_quote("")
cpp_quote("#ifndef __cplusplus")

typedef [
  uuid(47B6CCBF-6D52-4615-B086-9D809D24E34B),
  helpstring("ECG time series.")]
struct EcgSeries {
    [helpstring("time of 1st sample [seconds]")]
    double           start_time;

    [helpstring("time difference between each sample [seconds]")]
    double           delta_time;

    [helpstring("ECG sample waveform")]
    SAFEARRAY(float) samples;

    [helpstring("QRS trig time(s) within series [optional]")]
    SAFEARRAY(double) trig_times;
} EcgSeries;

cpp_quote("")
cpp_quote("#else // __cplusplus")
cpp_quote("} // extern \"C\"")
cpp_quote("")
cpp_quote("struct DECLSPEC_UUID(\"47B6CCBF-6D52-4615-B086-9D809D24E34B\") EcgSeries {")
cpp_quote("    double      start_time = 0;")
cpp_quote("    double      delta_time = 0;")
cpp_quote("    SAFEARRAY * samples    = nullptr; ///< float array")
cpp_quote("    SAFEARRAY * trig_times = nullptr; ///< double array")
cpp_quote("    ")
cpp_quote("    /* Primary ctor. */")
cpp_quote("    EcgSeries() {")
cpp_quote("    }")
cpp_quote("    /** Copy ctor. Performs deep copy. */")
cpp_quote("    EcgSeries(const EcgSeries& obj) {")
cpp_quote("        start_time = obj.start_time;")
cpp_quote("        delta_time = obj.delta_time;")
cpp_quote("        CComSafeArray<float> samples_tmp;")
cpp_quote("        samples_tmp.Attach(obj.samples);")
cpp_quote("        samples_tmp.CopyTo(&samples);")
cpp_quote("        samples_tmp.Detach();")
cpp_quote("        CComSafeArray<double> trig_tmp;")
cpp_quote("        trig_tmp.Attach(obj.trig_times);")
cpp_quote("        trig_tmp.CopyTo(&trig_times);")
cpp_quote("        trig_tmp.Detach();")
cpp_quote("    }")
cpp_quote("    ")
cpp_quote("    ~EcgSeries() {")
cpp_quote("        release(); // clear existing state")
cpp_quote("    }")
cpp_quote("    ")
cpp_quote("    /** Move assignment.*/")
cpp_quote("    EcgSeries& operator = (EcgSeries&& obj) {")
cpp_quote("        release(); // clear existing state")
cpp_quote("        ")
cpp_quote("        start_time = obj.start_time;")
cpp_quote("        obj.start_time = 0;")
cpp_quote("        delta_time = obj.delta_time;")
cpp_quote("        obj.delta_time = 0;")
cpp_quote("        samples = obj.samples;")
cpp_quote("        obj.samples = nullptr;")
cpp_quote("        trig_times = obj.trig_times;")
cpp_quote("        obj.trig_times = nullptr;")
cpp_quote("        return *this;")
cpp_quote("    }")
cpp_quote("    ")
cpp_quote("private:")
cpp_quote("    void release () {")
cpp_quote("        if (samples) {")
cpp_quote("            CComSafeArray<float> samples_tmp;")
cpp_quote("            samples_tmp.Attach(samples);")
cpp_quote("            samples = nullptr;")
cpp_quote("        }")
cpp_quote("        if (trig_times) {")
cpp_quote("            CComSafeArray<double> trig_tmp;")
cpp_quote("            trig_tmp.Attach(trig_times);")
cpp_quote("            trig_times = nullptr;")
cpp_quote("        }")
cpp_quote("    }")
cpp_quote("    ")
cpp_quote("    EcgSeries & operator = (const EcgSeries& obj) = delete; ///< disallow assignment operator")
cpp_quote("};")
cpp_quote("")
cpp_quote("extern \"C\"{")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#if defined _WIN64 || defined __x86_64__")
cpp_quote("static_assert(sizeof(EcgSeries) == 4*8, \"EcgSeries size mismatch\");")
cpp_quote("#else")
cpp_quote("static_assert(sizeof(EcgSeries) == 2*8+2*4, \"EcgSeries size mismatch\");")
cpp_quote("#endif")

[ object,
  oleautomation, // use "automation" marshaler (oleaut32.dll)
  uuid(D483D815-52DD-4750-8CA2-5C6C489588B6),
  helpstring("Interface for retrieving 3D image data.")]
interface IImage3dSource : IUnknown {
    [helpstring("Get the number of frames available")]
    HRESULT GetFrameCount ([out,retval] unsigned int * size);

    [helpstring("Get the time of all frames (useful for matching frame indices to ECG before retrieving image data) ")]
    HRESULT GetFrameTimes ([out, retval] SAFEARRAY(double) * frame_times);

    [helpstring("Get image data (const) for a given frame within a specified geometry")]
    HRESULT GetFrame ([in] unsigned int index, [in] Cart3dGeom geom, [in] unsigned short max_resolution[3], [out,retval] Image3d * data);

    [helpstring("Get a bounding box encapsulating all image data. Can be used as intput to GetFrame to avoid cropping.")]
    HRESULT GetBoundingBox ([out,retval] Cart3dGeom * geom);

    [helpstring("Retrieve color-map table for mapping image intensities to RGBx values. Length is 256.")]
    HRESULT GetColorMap ([out,retval] SAFEARRAY(unsigned int) * map);

    [helpstring("Get ECG data if available [optional]")]
    HRESULT GetECG ([out,retval] EcgSeries * ecg);

    [helpstring("")]
    HRESULT GetProbeInfo ([out,retval] ProbeInfo * probe);

    [helpstring("Get per-file DICOM UID string (to be matched against corresponding file)")]
    HRESULT GetSopInstanceUID ([out,retval] BSTR * uid_str);
};


[ object,
  oleautomation, // use "automation" marshaler (oleaut32.dll)
  uuid(CD30759B-EB38-4469-9CA5-4DF75737A31B),
  helpstring("Factory for loading 3D image data from a file.\n"
             "Implementors are responsible for also providing details on relevant DICOM tags that indicate that the loader might support the file.")]
interface IImage3dFileLoader : IUnknown {
    [helpstring("Load proprietary image file.\n"
                "The file might already by opened elsewhere, so no exclusive locks can be taken.\n"
                "The function shall return quickly with an informative error message (for debugging) in case of failure.")]
    HRESULT LoadFile ([in] BSTR file_name, [out, retval] BSTR * error_message);

    HRESULT GetImageSource ([out,retval] IImage3dSource ** img_src);
};
